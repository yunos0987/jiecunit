{#define BUFFER_SIZE 100}

(*
 * Compute the mean value.
 *
 * var
 *   dats: array[BUFFER_SIZE] of lreal;
 *   mean_value: lreal;
 * end
 * dats[0] := 2.0;
 * dats[1] := 4.0;
 * dats[2] := 9.0;
 * mean_value := mean(dats, 3); // 5.0; (2.0 + 4.0 + 9.0) / 3;
 *)
function mean: lreal
	var_in_out
		sample_buffer: array[BUFFER_SIZE] of lreal;
	end
	var_input
		sample_size: dint;
	end
	var_temp
		sample_index: dint;
		sum_value: lreal;
	end
	{st}
	sum_value := 0.0;
	for sample_index := 0 to sample_size - 1 do
		sum_value := sum_value + sample_buffer[sample_index];
	end_for;
	mean := sum_value / sample_size;
	{end}
end

(*
 * Incrementally compute the mean value.
 *
 * var
 *   rm_instance: RunningMean;
 *   ss: dint;
 *   mv: lreal;
 * end
 * rm_instance(value:=2.0, mean_value=>mv, sample_size=>ss); // mv=2.0, ss=1
 * rm_instance(value:=4.0, mean_value=>mv, sample_size=>ss); // mv=3.0, ss=2
 * rm_instance(value:=9.0, mean_value=>mv, sample_size=>ss); // mv=5.0, ss=3
 *)
function_block RunningMean
	var_input
		value: lreal;
	end
	var_output
		mean_value: lreal;
		sample_size: dint := 0;
	end
	var
		sum_value: lreal := 0.0;
	end
	{st}
	sum_value := sum_value + value;
	sample_size := sample_size + 1;
	mean_value := sum_value / sample_size;
	{end}
end
