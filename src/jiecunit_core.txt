{#ifndef __JIECUNIT_CORE_TXT__}
{#define __JIECUNIT_CORE_TXT__}

{#include <sys.txt>}

{#include "jiecunit_jiectest.txt"}

{#define _JIECTEST_ g_jiectest}
{#define _JIECTESTNAMES_ g_jiectestnames}

{#define currentNanosecCount() (Get100nsCnt() / 100)}

function existProgram: bool
	_PROLOGUE_OF_FUNCTION_()
	var_input
		programname: string[TESTNAME_MAX_SIZE];
	end
	var_temp
		t: bool;
	end
	{st}
	t := p_prger;
	p_prger := false;
	prgstatus(programname); // note: skip on error, if the program is not found.
	existProgram := not p_prger;
	p_prger := t;
	{end}
end

program {__func__:this_name} JiecUnitMain
	{#define _initialize()          JiecTest_initialize(_JIECTEST_)}
	{#define _register(testname)    JiecTest_register(_JIECTEST_, testname)}
	{#define _active_testname()     JiecTest_testname(_JIECTEST_, active_test_index)}
	{#define _num_of_tests()        _JIECTEST_.num_of_tests}
	{#define _num_of_failures()     _JIECTEST_.num_of_failures}
	{#define _is_active()           JiecTest_isActive(_JIECTEST_)}
	{#define _activate()            JiecTest_activate(_JIECTEST_)}
	{#define _next_cycle()          JiecTest_nextCycle(_JIECTEST_)}
	{#define _no_tests()            JiecTest_empty(_JIECTEST_)}
	{#define _bye()                 PrgStop(this_name); return}
	_DEFINE_SYS_IN_POU_();
	var_external
		_JIECTESTNAMES_: array[MAX_TESTS] of string[TESTNAME_MAX_SIZE];
		_JIECTEST_: JiecTest_t;
	end
	var
		testname_index: dint;
		testname: string[TESTNAME_MAX_SIZE];
		//
		test_index: dint;
		time_in_ns: ulint;
		tmp_string: string[STRING_MAX_SIZE];
		//
		active_test_index: dint := -1;
		active_test_failures0, active_test_failures1: dint;
		active_test_time0_in_ns, active_test_time1_in_ns, active_test_acuumulated_time_in_ns: ulint;
		tests_time_in_ns: ulint;
		//
		num_of_failed_tests: dint := 0;
		failed_testnames: array[MAX_TESTS] of string[TESTNAME_MAX_SIZE];
	end
	{st}
	if P_First_Run then
		reset_console(); // kludge: initialize console
		//
		active_test_index := -1;
		tests_time_in_ns := 0;
		_initialize();
		// register tests
		for testname_index := 0 to MAX_TESTS - 1 do
			testname := _JIECTESTNAMES_[testname_index];
			if (testname <> '') and (testname <> this_name) then
				if existProgram(testname) then
					_register(testname);
					PrgStop(testname);
				else
					puts(concat('Fatal error: program $'', testname, '$' is not found.'));
					_bye();
				end_if;
			end_if;
		end_for;
	else
		// epilogue
		repeat if _no_tests() then exit; end_if;
			active_test_time1_in_ns := currentNanosecCount();
			time_in_ns := active_test_time1_in_ns - active_test_time0_in_ns;
			active_test_acuumulated_time_in_ns := active_test_acuumulated_time_in_ns + time_in_ns;
			_next_cycle();

			if _is_active() then
				exit;
			end_if;

			tests_time_in_ns := tests_time_in_ns + active_test_acuumulated_time_in_ns;

			active_test_failures1 := _num_of_failures();
			if active_test_failures0 = active_test_failures1 then
				puts(concat('[     OK ] ', _active_testname(), ' (', ulint_to_string(active_test_acuumulated_time_in_ns / 1000), 'us)'));
			else
				failed_testnames[num_of_failed_tests] := _active_testname();
				inc(num_of_failed_tests);
				puts(concat('[ FAILED ] ', _active_testname(), ' (', ulint_to_string(active_test_acuumulated_time_in_ns / 1000), 'us)'));
			end_if;
			PrgStop(_active_testname());

			if active_test_index = _num_of_tests() - 1 then
				// finish
				tmp_string := concat(' (', lint_to_string(tests_time_in_ns / 1000), 'us)');
				puts(concat('[========] ', dint_to_string(_num_of_tests()), ' tests ran.', tmp_string));
				puts(concat('[ PASSED ] ', dint_to_string(_num_of_tests() - num_of_failed_tests), ' tests.'));
				if _num_of_failures() > 0 then
					puts(concat('[ FAILED ] ', dint_to_string(num_of_failed_tests), ' tests, listed below.'));
					for test_index := 0 to num_of_failed_tests - 1 do
						puts(concat('[ FAILED ] ', failed_testnames[test_index]));
					end_for;
				end_if;
				_bye();
			end_if;
		until true end_repeat;
	end_if;

	// prologue
	repeat if _no_tests() then exit; end_if;
		if (active_test_index = -1) or ((active_test_index < _num_of_tests() - 1) and not _is_active()) then
			// run the next test case.
			inc(active_test_index);
			_activate();
			active_test_failures0 := _num_of_failures();
			testname := _active_testname();
			PrgStart(testname, true); // true for isFirstRun.
			puts(concat('[ RUN    ] ', testname));
			active_test_acuumulated_time_in_ns := 0;
			active_test_time0_in_ns := currentNanosecCount();
		end_if;
	until true end_repeat;
	{end}
	{#undef _initialize}
	{#undef _register}
	{#undef _active_testname}
	{#undef _num_of_tests}
	{#undef _num_of_failures}
	{#undef _is_active}
	{#undef _activate}
	{#undef _next_cycle}
	{#undef _no_tests}
	{#undef _bye}
end

{#endif}
